exit
pokemon
exit
pokemon
exit
filter_table
Pokemon.filter(session[filter_name])
Poiemon.filter(session[filter_name])
filter_table
 filter_table.filter(session[filter_name])
session[filter_name]
exit
session[filter_name]
 filter_name = "#{filter_table.to_s.underscore}_filters"
exit
 filter_name = "#{filter_table.to_s.underscore}_filters"
filter(Pokemon)
exit
filters
pokemon.count
pokemon
exit
session[filter_name]
 filter_table.filter(session[filter_name])     
session[filter_name]
exit
pokemon
exit
filters
params
exit
filters
filters["name"]
pokemon
    pokemon = pokemon.by_name(filters["name"])
pokemon = Pokemon.includes(:stats, :pokemon_types, :types)
 pokemon = pokemon.joins(:types) if filters["type"].present?
filters["type"].present?
filters["type"]
filter["type"]
filters
filters["type"].present?
exit
Pokemon.joins(:types).where("types.id in (?)", [4,12])e
Pokemon.joins(:types).where("types.id in (?)", [4,12])
Pokemon.joins(:types).where("types.id = 4 and types.id = 12")
Pokemon.joins(:types).where("types.id = 4")
Pokemon.joins(:types)
Pokemon.joins(:types).where(where_string)
Pokemon.find(1).types
Pokmeon.find(1)
Pokemon.joins(:types).where(where_string)
where_string
exit
pokemon
exit
where_string
exit
where_string
exit
where_string
   where_string = ""
        types.select{|a| a!= ""}.each_with_index do |type, index|  
            if index != 0 
               where_string  += " AND "
            end
            where_string += "types.id = #{type}"
        end
types.select{|a| a!= ""}
types
type
where_string
   where_string = ""
        types.each_with_index do |type, index|  
            if index != 0 
               where_string  += " AND "
            end
            where_string += "types.id = #{type}"
        end
types.each_with_index do |type, index|  
            if index != 0 
               where_string  += " AND "
            end
            where_string += "types.id = #{type}"
        end
        where_string = ""
        types.each_with_index |type, index| do 
            if index != 0 
               where_string  += " AND "
            end
            where_string += "types.id = #{type}"
        end
types
where_string  += " AND "
where_string = ""
where_string  += " AND "
    where_string = ""
        types.each_with_index |type, index| do 
            if index != 0 
               where_string  += " AND "
            end
            where_string += "types.id = #{type}"
        end
   type_attributes = []
        type_count = types.count
        for i in (1..type_count)
            type_attributes << "types.id"
        end
types.count
types
exit
  Pokemon.filter_types(filters["types"])
exit
filters["types"]
(filters["types"]
filter
filter["types"]
(filters["types"]
self.official_artwork
official_artwork
exit
filters
params
pokemon.last
 pokemon = pokemon.order("#{filters["column"]} #{filters["direction"]}") if filters["column"].present?
exit
pokemon.last
    pokemon = pokemon.order("#{filters["column"]} #{filters["direction"]}") if filters["column"].present?
pokemon    pokemon = pokemon.order("#{filters["column"]} #{filters["direction"]}") if filters["column"].present?
pokemon
exit
pokemon
      pokemon = Pokemon.includes(:stats, :pokemon_types, :types)
        pokemon = pokemon.joins(:types) if filters["types"].present?
        pokemon = pokemon.by_name(filters["name"])
        pokemon = pokemon.by_type(filters["types"]) if filters["types"].present?
pokemon.first
    pokemon = pokemon.by_type(filters["types"]) if filters["types"].present?
pokemon = pokemon.by_name(filters["name"])
pokemon.joins(:types) if filters["types"].present?
  pokemon = Pokemon.includes(:stats, :pokemon_types, :types)
Pokemon.includes(:stats, :pokemon_types, :types).joins(:types).where("types.id in (?)", ["1"])
Pokemon.joins(:types).where("types.id in (?)", ["1"])
Pokemon.joins(:types).where("types.id = 1")
Pokemon.joins(:types)
Pokemon.join(:types)
pokemon.last
pokemon = pokemon.by_type(filters["types"]) if filters["types"].present?
pokemon
 pokemon.joins(:types) if filters["types"].present?
filters["types"].present?
filters["types"]
filters
filter["types"]
pokemon = Pokemon.includes(:stats, :pokemon_types, :types)
pokemon.first
pokemon
exit
pokemon.first
      pokemon = pokemon.by_type(filters["types"]) if filters["types"].present?
exit
pokemon.last
pokemon = pokemon.by_type(filters["types"]) if filters["types"].present?
pokemon.joins(:types)
pokemon.last
pokemon
exit
params.permit(filter_table::FILTER_PARAMS)
filter_table::FILTER_PARAMS
filter_table::FILTER_PARAMS.include?("types")
filter_table::FILTER_PARAMS
params.permit(filter_table::FILTER_PARAMS)
filter_params_for(filter_table)
params["types"]
params
session
exit
filters
params
Pokemon.includes(:stats, :types).by_name(filters["name"]).by_type(filters["types"])
Pokemon.includes(:stats, :types).by_name(filters["name"])
Pokemon.includes(:stats, :types)
 Pokemon.includes(:stats, :types)
   22:             .by_name(filters["name"])
   23:             .by_type(filters["types"])
 Pokemon.includes(:stats, :types)
   22:             .by_name(filters["name"])
   23:             .by_type(filters["types"])
=> 24:             .order("#{filters["column"]} #{filters["direction"]}") if filters["column"].present?
filters["types"]
filters
exit
Pokemon.find(100)
PokemonType.where(pokemon_id: 100)
Type.find(13)
Pokemon.find(148)
PokemonType.last
exit
 pokemon_type = PokemonType.new(pokemon_id: pokemon.id, type_id: type_id(type))
type_id(type)
exit
PokemonType
 type_id = Type.find_by(name: type_name).id
  type_name = type["type"]["name"]
       type_id = Type.find_by(name: type_name).id
PokemonType
type["type"]["name"]
type["type"]
type = types.first
types.first
types
types.fist
types
types.dig("type")
types
types = PokemonApi.new.pokemon(pokemon.id).dig("types")
Typxtypes = PokemonApi.new.pokemon(pokemon.id).dig("types")
type
Type.find(type_id)
type_id = types.first["type"]["url"].split("/").last.to_i
types.first["type"]["url"].split("/").last.to_i
types.first["type"]["url"].split("/").last
types.first["type"]["url"].split("/")
types.first["type"]["url"]
url.split("/")
Type.where("name = ?", types.first["type"]["#{url.split("/").last}] )
Type.where("name = ?", types.first["type"]["name"] )
types.first["type"]["name"]
types.first["type"]
Type.where("name = ?", types.first["type"] )
Type.where(name = types.first["type"])
Type.where(name: types.first["type"])
Type.where(name: types.first["type"]).last
Type.where(name: types.first["type"])
Type.last
Type.where(types.first["type"])
Type.where(types.first["type"]).name
Type.where(types.first["type"])
types.first["type"]
types.first
types.last
types.first
types.count
types = PokemonApi.new.pokemon(pokemon.id).dig("types")
PokemonApi.new.pokemon(pokemon.id).dig("types")
PokemonApi.new.pokemon(pokemon.id)
pokemon.id
exit
